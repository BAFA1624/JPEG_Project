!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CRC_table	./src/png/crc.cpp	/^unsigned long CRC_table[256];$/;"	v
CRC_table_computed	./src/png/crc.cpp	/^bool          CRC_table_computed = false;$/;"	v
IHDR	./include/png/png_types.hpp	/^    IHDR = 0x49'48'44'52,$/;"	m	class:PNG::png_chunk_t
INVALID	./include/png/png_types.hpp	/^    INVALID = 0,$/;"	m	class:PNG::png_chunk_t
JPEG_PROJECT_CRC_HPP	./include/png/crc.hpp	/^#define JPEG_PROJECT_CRC_HPP$/;"	d
NOCOPY	./include/common/common.hpp	/^#define NOCOPY(/;"	d
NOMOVE	./include/common/common.hpp	/^#define NOMOVE(/;"	d
PNG	./include/png/png.hpp	/^class PNG$/;"	c	namespace:PNG
PNG	./include/png/png.hpp	/^namespace PNG$/;"	n
PNG	./include/png/png_types.hpp	/^namespace PNG$/;"	n
PNG	./src/png/png.cpp	/^constexpr PNG::PNG( const std::string_view raw_data ) {$/;"	f	class:PNG::PNG
PNG	./src/png/png.cpp	/^constexpr PNG::PNG() : png_raw(), png_chunks() {}$/;"	f	class:PNG::PNG
PNG	./src/png/png.cpp	/^namespace PNG$/;"	n	file:
PNG	./src/png/png_types.cpp	/^namespace PNG$/;"	n	file:
PNG	./tests/png/png_class_test.cpp	/^namespace PNG$/;"	n	file:
PNG	./tests/png/png_types_test.cpp	/^namespace PNG$/;"	n	file:
PNGChunk	./include/png/png_types.hpp	/^struct PNGChunk$/;"	s	class:PNG::png_chunk_t::png_pixel_format_t
alpha_grayscale	./include/png/png_types.hpp	/^    alpha_grayscale = 4,$/;"	m	class:PNG::png_chunk_t::png_pixel_format_t
alpha_truecolor	./include/png/png_types.hpp	/^    alpha_truecolor = 6$/;"	m	class:PNG::png_chunk_t::png_pixel_format_t
block_ptr	./include/png/png_types.hpp	/^    std::unique_ptr<char *> block_ptr;  \/\/ Pointer to start of block in memory$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
block_size	./include/png/png_types.hpp	/^    std::uint32_t           block_size; \/\/ Length of block$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
common_test	./tests/common/common_test.cpp	/^common_test( int argc, char ** argv ) {$/;"	f
crc	./include/png/png_types.hpp	/^    std::bitset<32>         crc; \/\/ Block cyclic-redundancy-check for block$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
crc	./src/png/png_types.cpp	/^    crc( _crc ) {$/;"	f	namespace:PNG
crc	./src/png/png_types.cpp	/^    crc( _crc ) {}$/;"	f	namespace:PNG
crc	./src/png/png_types.cpp	/^    crc( rhs.crc ) {$/;"	f	namespace:PNG
deep_copy	./src/png/png_types.cpp	/^PNGChunk::deep_copy() const {$/;"	f	class:PNG::PNGChunk
grayscale	./include/png/png_types.hpp	/^    grayscale,$/;"	m	class:PNG::png_chunk_t::png_pixel_format_t
indexed	./include/png/png_types.hpp	/^    indexed = 3,$/;"	m	class:PNG::png_chunk_t::png_pixel_format_t
main	./src/main.cpp	/^main( [[maybe_unused]] int argc, [[maybe_unused]] char * argv[] ) {$/;"	f
noexcept	./include/png/png.hpp	/^verify_png_header( const std::bitset<64> & header_bits ) noexcept;$/;"	m	namespace:PNG
noexcept	./include/png/png_types.hpp	/^                        const std::bitset<32> & _crc ) noexcept;$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
noexcept	./include/png/png_types.hpp	/^    constexpr PNGChunk & operator=( PNGChunk && rhs ) noexcept;$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
noexcept	./include/png/png_types.hpp	/^    constexpr PNGChunk( PNGChunk && rhs ) noexcept;$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
noexcept	./include/png/png_types.hpp	/^    constexpr bool is_valid() const noexcept;$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
noexcept	./include/png/png_types.hpp	/^    constexpr explicit PNGChunk() noexcept;$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
operator <<	./src/png/png_types.cpp	/^operator<<( std::ostream & out_stream, const png_chunk_t chunk_type ) {$/;"	f	namespace:PNG
png_chunk_t	./include/png/png_types.hpp	/^enum class png_chunk_t : std::uint32_t {$/;"	c	namespace:PNG
png_chunks	./include/png/png.hpp	/^    std::vector<PNGChunk>      png_chunks;$/;"	m	class:PNG::PNG
png_class_test	./tests/png/png_class_test.cpp	/^png_class_test( int argc, char ** argv ) {$/;"	f
png_error_t	./include/png/png_types.hpp	/^enum class png_error_t { invalid_parse };$/;"	c	class:PNG::png_chunk_t::png_pixel_format_t
png_pixel_format_t	./include/png/png_types.hpp	/^enum class png_pixel_format_t {$/;"	c	class:PNG::png_chunk_t
png_raw	./include/png/png.hpp	/^    std::vector<unsigned char> png_raw;$/;"	m	class:PNG::PNG
png_types_test	./tests/png/png_types_test.cpp	/^png_types_test( int argc, char ** argv ) {$/;"	f
truecolor	./include/png/png_types.hpp	/^    truecolor = 2,$/;"	m	class:PNG::png_chunk_t::png_pixel_format_t
type	./include/png/png_types.hpp	/^    png_chunk_t             type;       \/\/ Type of block$/;"	m	struct:PNG::png_chunk_t::png_pixel_format_t::PNGChunk
